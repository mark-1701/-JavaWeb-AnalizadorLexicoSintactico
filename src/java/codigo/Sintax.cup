package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Comillas, Pckg, Imprt, Jtcs, Plub, Prit, Ptg, Ctg, T_dato, Tx, Stc, 
    Vid, Cond, Condcc, Ejt, Mtrt, Rptr, Itp, Op, Detn, Itn, Trp, Cero, Lista, 
    Cjt, Reserv, Gen, Hrd, Exc, Fnz, Rtn, Fcn, Rtr, Min, Strg, Ars, Sysm, Ot, 
    Impr, Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, P_coma, Coma, Punto, Verdadero,
    Falso, Identificador, Numero_positivo, Numero_negativo, Cadena, IdentClasePaquete, S_linea, 
    ERROR;
non terminal INICIO, INICIO_COMPUESTO, SALTOS_LINEA, LINEA, PAQUETE, IMPORTACION, CLASE, SENTENCIA_CLASE, SENTENCIA, SENTENCIA_COMPUESTA, IMPRESION, INICIO_SENTECIA_IMPRESION, SENTECIA_IMPRESION, METODO_MAIN, 
    DECLARACION, ASIGNACION, OPERACIONES, OP, DECLARACION_RPTR, COND, COND_COMPLEMENTOS, COND_ANIDADO, COND_CONDCC,MTRT, EJT_MTRT, RPTR, 
    SENTENCIA_BOOLEANA, SENTENCIA_RPTR;

//REGLAS DE PRODUCCION
precedence left Suma, Resta; 
precedence left Multiplicacion, Division;

/*
LAS NO TERMINALES COMPUESTAS SON TERMINALES QUE UTILICE PARA OPTIMINAR CODIGO CUANDO USO SALTOS_LINEA
*/

start with INICIO;

INICIO ::= 
    SALTOS_LINEA INICIO_COMPUESTO |
    SENTENCIA_CLASE
;
INICIO_COMPUESTO ::=
    PAQUETE SALTOS_LINEA IMPORTACION SALTOS_LINEA CLASE SALTOS_LINEA |
    IMPORTACION SALTOS_LINEA CLASE SALTOS_LINEA | 
    PAQUETE SALTOS_LINEA CLASE SALTOS_LINEA |
    CLASE SALTOS_LINEA |
    PAQUETE SALTOS_LINEA IMPORTACION SENTENCIA_CLASE |
    IMPORTACION SENTENCIA_CLASE |
    PAQUETE SENTENCIA_CLASE |
;
SALTOS_LINEA ::=
    SALTOS_LINEA S_linea |
;
PAQUETE ::=
    Pckg IdentClasePaquete P_coma
;
IMPORTACION ::=
    Imprt Stc Jtcs P_coma
;
CLASE ::=
    Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c
;
SENTENCIA_CLASE ::=
    SENTENCIA METODO_MAIN SALTOS_LINEA |
    SALTOS_LINEA METODO_MAIN SENTENCIA |
    SENTENCIA METODO_MAIN SENTENCIA |
    SENTENCIA |
    SALTOS_LINEA METODO_MAIN SALTOS_LINEA
;
SENTENCIA ::=
    SALTOS_LINEA SENTENCIA_COMPUESTA
;
SENTENCIA_COMPUESTA ::=
    SENTENCIA_COMPUESTA IMPRESION SALTOS_LINEA |
    IMPRESION SALTOS_LINEA |
    SENTENCIA_COMPUESTA DECLARACION SALTOS_LINEA |
    DECLARACION SALTOS_LINEA |
    SENTENCIA_COMPUESTA ASIGNACION SALTOS_LINEA | 
    ASIGNACION SALTOS_LINEA |
    SENTENCIA_COMPUESTA COND SALTOS_LINEA | 
    COND SALTOS_LINEA |
    SENTENCIA_COMPUESTA MTRT SALTOS_LINEA |
    MTRT SALTOS_LINEA |
    SENTENCIA_COMPUESTA EJT_MTRT SALTOS_LINEA |
    EJT_MTRT SALTOS_LINEA |
    SENTENCIA_COMPUESTA RPTR SALTOS_LINEA |
    RPTR SALTOS_LINEA
;
METODO_MAIN ::=
    Plub Stc Vid Min Parentesis_a Strg Ars Corchete_a Corchete_c Parentesis_c Llave_a SENTENCIA Llave_c
;
IMPRESION ::=
    Sysm Punto Ot Punto Impr Parentesis_a INICIO_SENTECIA_IMPRESION SENTECIA_IMPRESION Parentesis_c P_coma
;
INICIO_SENTECIA_IMPRESION ::=
    Cadena | 
    Identificador |
    Numero_positivo |
    Numero_negativo
;
SENTECIA_IMPRESION ::=
    Suma Cadena SENTECIA_IMPRESION |
    Suma Identificador SENTECIA_IMPRESION |
    Suma Numero_positivo SENTECIA_IMPRESION |
    Suma Numero_negativo SENTECIA_IMPRESION |
;
DECLARACION ::= 
    T_dato Identificador P_coma | 
    T_dato Identificador Igual Numero_positivo P_coma |
    T_dato Identificador Igual Numero_negativo P_coma |
    T_dato Identificador Igual Cadena P_coma |
    T_dato Identificador Igual Verdadero P_coma |
    T_dato Identificador Igual Falso P_coma |  
    Tx Identificador P_coma |
    Tx Identificador Igual Cadena P_coma   
;
ASIGNACION ::=
    //ASIGNACION COMUNES
    Identificador Op_atribucion Numero_positivo P_coma |
    Identificador Op_atribucion Numero_negativo P_coma |
    Identificador Igual Verdadero P_coma |
    Identificador Igual Falso P_coma | 
    Identificador Igual Cadena P_coma |
    Identificador Igual OPERACIONES P_coma
;
OPERACIONES ::=
    OPERACIONES OP OPERACIONES | Parentesis_a OPERACIONES Parentesis_c | Resta OPERACIONES | Identificador | Numero_positivo | Numero_negativo
;
OP ::=
    Suma | 
    Resta |
    Multiplicacion |
    Division
;

//IF
COND ::= 
    Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c |
    Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c COND_COMPLEMENTOS
;
//IF COMPLEMENTOS
COND_COMPLEMENTOS ::=  COND_ANIDADO COND_COMPLEMENTOS | COND_ANIDADO | COND_CONDCC
;
//IF ANIDADO
COND_ANIDADO ::= Condcc Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
//IF - ELSE
COND_CONDCC ::= Condcc Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero_positivo |
    Identificador Op_relacional Numero_negativo |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Cadena |
    Numero_positivo Op_relacional Numero_positivo |
    Numero_negativo Op_relacional Numero_negativo |
    Numero_negativo Op_relacional Numero_positivo |
    Numero_positivo Op_relacional Numero_negativo |
    Numero_positivo Op_relacional Identificador |
    Numero_negativo Op_relacional Identificador |
    Cadena Op_relacional Cadena
;

//WHILE
MTRT ::= Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
//DO - WHILE
EJT_MTRT ::= Ejt Llave_a SENTENCIA Llave_c  Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
//FOR
RPTR ::= Rptr Parentesis_a SENTENCIA_RPTR Parentesis_c Llave_a SENTENCIA Llave_c
;
//SENTENCIA - FOR
SENTENCIA_RPTR ::=
    T_dato Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR |
    T_dato Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR |
    Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR |
    Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR
;
//DECLARACION - FOR
DECLARACION_RPTR ::= 
    Identificador Op_atribucion Numero_positivo |
    Identificador Op_atribucion Numero_negativo |
    Identificador Op_incremento | 
    Op_incremento Identificador
;