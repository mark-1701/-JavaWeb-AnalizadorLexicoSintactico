/* The following code was generated by JFlex 1.4.3 on 31/05/23 23:57 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/05/23 23:57 from the specification file
 * <tt>C:/Users/Marco Muralles/Documents/NetBeansProjects/ANALIZADORLEXICO2/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\17\2\0\1\3\22\0\1\3\1\56\1\20\2\0"+
    "\1\61\1\54\1\74\1\62\1\63\1\16\1\52\1\71\1\15\1\72"+
    "\1\53\12\2\1\0\1\70\1\60\1\51\1\57\1\0\1\73\1\10"+
    "\2\1\1\7\1\5\1\12\5\1\1\13\2\1\1\11\2\1\1\6"+
    "\1\14\2\1\1\4\4\1\1\66\1\0\1\67\1\0\1\1\1\0"+
    "\1\45\1\35\1\22\1\41\1\40\1\42\1\24\1\46\1\25\1\31"+
    "\1\23\1\33\1\26\1\37\1\36\1\21\1\1\1\27\1\32\1\30"+
    "\1\34\1\44\1\1\1\43\1\50\1\47\1\64\1\55\1\65\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\1\6"+
    "\1\7\1\10\22\2\1\11\1\12\1\13\3\14\2\15"+
    "\1\1\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\1\1\0\2\2\1\27\1\30\1\31"+
    "\1\0\1\32\21\2\1\33\5\2\1\34\1\35\12\2"+
    "\1\15\1\30\1\14\1\36\1\3\2\2\2\0\2\2"+
    "\1\37\1\2\1\40\1\41\2\2\1\42\1\2\1\43"+
    "\1\44\1\45\2\2\1\46\1\47\1\2\1\50\2\2"+
    "\1\51\3\2\1\52\1\53\1\54\1\2\1\55\1\56"+
    "\1\2\1\57\1\60\1\61\2\2\1\27\1\0\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\2"+
    "\1\72\1\73\1\74\1\75\1\2\1\76\2\2\1\77"+
    "\1\0\1\2\1\100\1\2\1\101\1\2\1\4\1\102"+
    "\1\103\2\2\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u01e8"+
    "\0\u0726\0\u0763\0\u06ac\0\u07a0\0\u07dd\0\u01e8\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\u081a"+
    "\0\u0225\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\75\0\u0225"+
    "\0\u0225\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\172\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\172\0\172\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\75\0\75\0\75\0\u081a"+
    "\0\u0857\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\172"+
    "\0\u1296\0\172\0\172\0\u12d3\0\u1310\0\172\0\u134d\0\172"+
    "\0\172\0\172\0\u138a\0\u13c7\0\172\0\172\0\u1404\0\172"+
    "\0\u1441\0\u147e\0\172\0\u14bb\0\u14f8\0\u1535\0\172\0\172"+
    "\0\172\0\u1572\0\172\0\172\0\u15af\0\172\0\172\0\172"+
    "\0\u15ec\0\u1629\0\u11a2\0\u1666\0\172\0\172\0\172\0\u16a3"+
    "\0\172\0\u16e0\0\172\0\172\0\u171d\0\172\0\172\0\172"+
    "\0\172\0\u175a\0\172\0\u1797\0\u17d4\0\172\0\u1811\0\u184e"+
    "\0\172\0\u188b\0\172\0\u18c8\0\u11df\0\172\0\172\0\u1905"+
    "\0\u1942\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\5\3\1\7\2\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\3"+
    "\1\26\1\27\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\35\2\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\76\0\2\3"+
    "\1\0\11\3\4\0\30\3\26\0\1\4\67\0\1\62"+
    "\5\0\1\5\72\0\2\3\1\0\1\3\1\63\7\3"+
    "\4\0\17\3\1\63\10\3\25\0\2\3\1\0\4\3"+
    "\1\64\4\3\4\0\24\3\1\64\3\3\26\0\1\65"+
    "\12\0\1\66\33\0\1\67\74\0\1\67\23\0\17\70"+
    "\1\0\1\71\53\70\1\71\1\0\2\3\1\0\11\3"+
    "\4\0\1\3\1\72\4\3\1\73\1\74\2\3\1\75"+
    "\15\3\25\0\2\3\1\0\11\3\4\0\7\3\1\76"+
    "\1\77\4\3\1\100\1\3\1\101\10\3\25\0\2\3"+
    "\1\0\11\3\4\0\17\3\1\102\10\3\25\0\2\3"+
    "\1\0\11\3\4\0\5\3\1\103\1\3\1\104\20\3"+
    "\25\0\2\3\1\0\11\3\4\0\4\3\1\105\2\3"+
    "\1\106\20\3\25\0\2\3\1\0\11\3\4\0\1\107"+
    "\6\3\1\110\7\3\1\111\10\3\25\0\2\3\1\0"+
    "\11\3\4\0\6\3\1\112\13\3\1\113\5\3\25\0"+
    "\2\3\1\0\11\3\4\0\7\3\1\114\20\3\25\0"+
    "\2\3\1\0\11\3\4\0\7\3\1\115\17\3\1\116"+
    "\25\0\2\3\1\0\11\3\4\0\4\3\1\117\10\3"+
    "\1\120\12\3\25\0\2\3\1\0\11\3\4\0\1\121"+
    "\6\3\1\122\20\3\25\0\2\3\1\0\11\3\4\0"+
    "\5\3\1\123\22\3\25\0\2\3\1\0\11\3\4\0"+
    "\10\3\1\124\11\3\1\125\5\3\25\0\2\3\1\0"+
    "\11\3\4\0\17\3\1\126\10\3\25\0\2\3\1\0"+
    "\4\3\1\64\4\3\4\0\1\3\1\127\14\3\1\130"+
    "\5\3\1\131\3\3\25\0\2\3\1\0\1\3\1\63"+
    "\7\3\4\0\4\3\1\132\12\3\1\63\10\3\25\0"+
    "\2\3\1\0\11\3\4\0\6\3\1\133\21\3\25\0"+
    "\2\3\1\0\11\3\4\0\6\3\1\134\21\3\75\0"+
    "\1\135\74\0\1\67\1\136\76\0\1\137\75\0\1\137"+
    "\70\0\1\135\5\0\1\135\66\0\1\135\6\0\1\135"+
    "\15\0\2\140\1\0\11\140\4\0\30\140\26\0\1\141"+
    "\73\0\2\3\1\0\2\3\1\142\6\3\4\0\6\3"+
    "\1\142\21\3\25\0\2\3\1\0\7\3\1\143\1\3"+
    "\4\0\12\3\1\143\15\3\26\0\1\65\67\0\1\144"+
    "\20\0\1\145\57\0\2\3\1\0\11\3\4\0\2\3"+
    "\1\146\25\3\25\0\2\3\1\0\11\3\4\0\4\3"+
    "\1\147\23\3\25\0\2\3\1\0\11\3\4\0\3\3"+
    "\1\150\24\3\25\0\2\3\1\0\11\3\4\0\13\3"+
    "\1\151\14\3\25\0\2\3\1\0\11\3\4\0\3\3"+
    "\1\152\24\3\25\0\2\3\1\0\11\3\4\0\7\3"+
    "\1\153\20\3\25\0\2\3\1\0\11\3\4\0\16\3"+
    "\1\154\11\3\25\0\2\3\1\0\11\3\4\0\6\3"+
    "\1\155\21\3\25\0\2\3\1\0\11\3\4\0\16\3"+
    "\1\156\11\3\25\0\2\3\1\0\11\3\4\0\1\157"+
    "\27\3\25\0\2\3\1\0\11\3\4\0\1\160\15\3"+
    "\1\161\11\3\25\0\2\3\1\0\11\3\4\0\16\3"+
    "\1\162\11\3\25\0\2\3\1\0\11\3\4\0\6\3"+
    "\1\163\21\3\25\0\2\3\1\0\11\3\4\0\7\3"+
    "\1\164\20\3\25\0\2\3\1\0\11\3\4\0\6\3"+
    "\1\165\7\3\1\166\11\3\25\0\2\3\1\0\11\3"+
    "\4\0\11\3\1\167\16\3\25\0\2\3\1\0\11\3"+
    "\4\0\1\170\12\3\1\171\14\3\25\0\2\3\1\0"+
    "\11\3\4\0\1\3\1\172\26\3\25\0\2\3\1\0"+
    "\11\3\4\0\1\3\1\173\4\3\1\174\21\3\25\0"+
    "\2\3\1\0\11\3\4\0\11\3\1\175\16\3\25\0"+
    "\2\3\1\0\11\3\4\0\11\3\1\176\16\3\25\0"+
    "\2\3\1\0\11\3\4\0\3\3\1\177\24\3\25\0"+
    "\2\3\1\0\11\3\4\0\17\3\3\177\6\3\25\0"+
    "\2\3\1\0\11\3\4\0\7\3\1\200\20\3\25\0"+
    "\2\3\1\0\11\3\4\0\1\3\1\201\26\3\25\0"+
    "\2\3\1\0\11\3\4\0\7\3\1\202\20\3\25\0"+
    "\2\3\1\0\11\3\4\0\16\3\1\203\11\3\25\0"+
    "\2\3\1\0\11\3\4\0\26\3\1\204\1\3\25\0"+
    "\2\3\1\0\7\3\1\143\1\3\4\0\12\3\1\205"+
    "\15\3\25\0\2\3\1\0\11\3\4\0\20\3\1\206"+
    "\7\3\25\0\2\3\1\0\11\3\4\0\11\3\1\207"+
    "\16\3\25\0\2\3\1\0\11\3\4\0\20\3\1\210"+
    "\7\3\25\0\2\3\1\0\3\3\1\211\5\3\4\0"+
    "\20\3\1\211\7\3\25\0\2\3\1\0\10\3\1\212"+
    "\4\0\11\3\1\212\16\3\26\0\1\213\72\0\15\145"+
    "\1\214\1\145\1\0\55\145\1\0\2\3\1\0\11\3"+
    "\4\0\3\3\1\215\24\3\25\0\2\3\1\0\11\3"+
    "\4\0\7\3\1\216\20\3\25\0\2\3\1\0\11\3"+
    "\4\0\14\3\1\217\13\3\25\0\2\3\1\0\11\3"+
    "\4\0\20\3\1\220\7\3\25\0\2\3\1\0\11\3"+
    "\4\0\15\3\1\221\12\3\25\0\2\3\1\0\11\3"+
    "\4\0\6\3\1\222\21\3\25\0\2\3\1\0\11\3"+
    "\4\0\7\3\1\223\20\3\25\0\2\3\1\0\11\3"+
    "\4\0\6\3\1\224\21\3\25\0\2\3\1\0\11\3"+
    "\4\0\17\3\1\225\10\3\25\0\2\3\1\0\11\3"+
    "\4\0\17\3\1\226\10\3\25\0\2\3\1\0\11\3"+
    "\4\0\11\3\1\227\16\3\25\0\2\3\1\0\11\3"+
    "\4\0\3\3\1\230\24\3\25\0\2\3\1\0\11\3"+
    "\4\0\5\3\1\231\22\3\25\0\2\3\1\0\11\3"+
    "\4\0\7\3\1\232\20\3\25\0\2\3\1\0\11\3"+
    "\4\0\16\3\1\233\11\3\25\0\2\3\1\0\10\3"+
    "\1\212\4\0\11\3\1\234\16\3\25\0\2\3\1\0"+
    "\4\3\1\235\4\3\4\0\24\3\1\235\3\3\25\0"+
    "\2\3\1\0\5\3\1\236\3\3\4\0\15\3\1\236"+
    "\12\3\24\0\15\145\1\237\1\145\1\0\55\145\1\0"+
    "\2\3\1\0\11\3\4\0\1\3\1\240\26\3\25\0"+
    "\2\3\1\0\11\3\4\0\7\3\1\241\20\3\25\0"+
    "\2\3\1\0\11\3\4\0\6\3\1\242\21\3\25\0"+
    "\2\3\1\0\11\3\4\0\24\3\1\243\3\3\25\0"+
    "\2\3\1\0\5\3\1\236\3\3\4\0\15\3\1\236"+
    "\1\3\1\226\10\3\25\0\2\3\1\0\3\3\1\244"+
    "\5\3\4\0\20\3\1\244\7\3\24\0\15\145\1\237"+
    "\1\245\1\0\55\145\1\0\2\3\1\0\11\3\4\0"+
    "\1\3\1\246\26\3\25\0\2\3\1\0\11\3\4\0"+
    "\23\3\1\247\4\3\25\0\2\3\1\0\1\3\1\250"+
    "\7\3\4\0\17\3\1\250\10\3\25\0\2\3\1\0"+
    "\2\3\1\251\6\3\4\0\6\3\1\251\21\3\25\0"+
    "\2\3\1\0\5\3\1\252\3\3\4\0\15\3\1\252"+
    "\12\3\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6527];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\34\1\11\11\2\1\1\0"+
    "\4\1\1\11\1\0\44\1\3\11\4\1\2\0\46\1"+
    "\1\0\22\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { lexeme=yytext(); return Sysm;
          }
        case 69: break;
        case 30: 
          { lexeme=yytext(); return Identificador;
          }
        case 70: break;
        case 60: 
          { lexeme=yytext(); return Strg;
          }
        case 71: break;
        case 20: 
          { lexeme=yytext(); return P_coma;
          }
        case 72: break;
        case 47: 
          { lexeme=yytext(); return Vid;
          }
        case 73: break;
        case 16: 
          { lexeme=yytext(); return Llave_a;
          }
        case 74: break;
        case 3: 
          { lexeme=yytext(); return Numero_positivo;
          }
        case 75: break;
        case 37: 
          { lexeme=yytext(); return Min;
          }
        case 76: break;
        case 34: 
          { lexeme=yytext(); return Gen;
          }
        case 77: break;
        case 67: 
          { lexeme=yytext(); return Reserv;
          }
        case 78: break;
        case 63: 
          { lexeme=yytext(); return Falso;
          }
        case 79: break;
        case 66: 
          { lexeme=yytext(); return Condcc;
          }
        case 80: break;
        case 49: 
          { lexeme=yytext(); return Hrd;
          }
        case 81: break;
        case 40: 
          { lexeme=yytext(); return Trp;
          }
        case 82: break;
        case 23: 
          { lexeme=yytext(); return Numero_negativo;
          }
        case 83: break;
        case 59: 
          { lexeme=yytext(); return Jtcs;
          }
        case 84: break;
        case 11: 
          { lexeme=yytext(); return Division;
          }
        case 85: break;
        case 13: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 86: break;
        case 12: 
          { lexeme=yytext(); return Op_logico;
          }
        case 87: break;
        case 31: 
          { lexeme=yytext(); return Ptg;
          }
        case 88: break;
        case 25: 
          { lexeme = yytext(); return Op_atribucion;
          }
        case 89: break;
        case 24: 
          { lexeme = yytext(); return Op_incremento;
          }
        case 90: break;
        case 17: 
          { lexeme=yytext(); return Llave_c;
          }
        case 91: break;
        case 56: 
          { lexeme=yytext(); return Mtrt;
          }
        case 92: break;
        case 14: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 93: break;
        case 65: 
          { lexeme=yytext(); return Lista;
          }
        case 94: break;
        case 62: 
          { lexeme=yytext(); return Detn;
          }
        case 95: break;
        case 8: 
          { lexeme=yytext(); return Comillas;
          }
        case 96: break;
        case 48: 
          { lexeme=yytext(); return Ars;
          }
        case 97: break;
        case 18: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 98: break;
        case 35: 
          { lexeme=yytext(); return Itp;
          }
        case 99: break;
        case 55: 
          { lexeme=yytext(); return Impr;
          }
        case 100: break;
        case 26: 
          { lexeme=yytext(); return Cadena;
          }
        case 101: break;
        case 38: 
          { lexeme=yytext(); return Rtr;
          }
        case 102: break;
        case 64: 
          { lexeme=yytext(); return Imprt;
          }
        case 103: break;
        case 22: 
          { lexeme=yytext(); return Punto;
          }
        case 104: break;
        case 54: 
          { lexeme=yytext(); return Cero;
          }
        case 105: break;
        case 5: 
          { lexeme=yytext(); return Resta;
          }
        case 106: break;
        case 42: 
          { lexeme=yytext(); return T_dato;
          }
        case 107: break;
        case 44: 
          { lexeme=yytext(); return Exc;
          }
        case 108: break;
        case 29: 
          { lexeme=yytext(); return Ot;
          }
        case 109: break;
        case 50: 
          { lexeme=yytext(); return Pckg;
          }
        case 110: break;
        case 46: 
          { lexeme=yytext(); return Fnz;
          }
        case 111: break;
        case 43: 
          { lexeme=yytext(); return Ejt;
          }
        case 112: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 113: break;
        case 27: 
          { lexeme=yytext(); return Tx;
          }
        case 114: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 115: break;
        case 68: 
          { lexeme=yytext(); return Verdadero;
          }
        case 116: break;
        case 53: 
          { lexeme=yytext(); return Cond;
          }
        case 117: break;
        case 6: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 118: break;
        case 51: 
          { lexeme=yytext(); return Prit;
          }
        case 119: break;
        case 57: 
          { lexeme=yytext(); return Rptr;
          }
        case 120: break;
        case 19: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 121: break;
        case 52: 
          { lexeme=yytext(); return Plub;
          }
        case 122: break;
        case 41: 
          { lexeme=yytext(); return Stc;
          }
        case 123: break;
        case 39: 
          { lexeme=yytext(); return Rtn;
          }
        case 124: break;
        case 9: 
          { lexeme=yytext(); return Igual;
          }
        case 125: break;
        case 21: 
          { lexeme=yytext(); return Coma;
          }
        case 126: break;
        case 58: 
          { lexeme = yytext(); return Op_booleano;
          }
        case 127: break;
        case 45: 
          { lexeme=yytext(); return Fcn;
          }
        case 128: break;
        case 36: 
          { lexeme=yytext(); return Int;
          }
        case 129: break;
        case 4: 
          { /*Ignore*/
          }
        case 130: break;
        case 33: 
          { lexeme=yytext(); return Cjt;
          }
        case 131: break;
        case 7: 
          { return S_linea;
          }
        case 132: break;
        case 28: 
          { lexeme=yytext(); return Op;
          }
        case 133: break;
        case 2: 
          { lexeme=yytext(); return IdentClasePaquete;
          }
        case 134: break;
        case 10: 
          { lexeme=yytext(); return Suma;
          }
        case 135: break;
        case 32: 
          { lexeme=yytext(); return Ctg;
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
