
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 31 23:57:50 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 31 23:57:50 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\010\000\002\003\006\000\002\003\006" +
    "\000\002\003\004\000\002\003\006\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\004\004\000\002" +
    "\004\002\000\002\006\005\000\002\007\006\000\002\010" +
    "\010\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\005\000\002\012\004\000" +
    "\002\013\005\000\002\013\004\000\002\013\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\004\000\002\013" +
    "\005\000\002\013\004\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\004\000\002\013\005\000" +
    "\002\013\004\000\002\017\017\000\002\014\014\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\002\000\002\020\005\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\007\000\002\020\007\000\002\020\005\000\002\020" +
    "\007\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\022\005\000\002\022\005\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\025\011\000\002\025\012\000\002\026\004\000" +
    "\002\026\003\000\002\026\003\000\002\027\012\000\002" +
    "\030\006\000\002\034\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\031\011\000\002\032\013\000\002\033" +
    "\011\000\002\035\012\000\002\035\012\000\002\035\011" +
    "\000\002\035\011\000\002\024\005\000\002\024\005\000" +
    "\002\024\004\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\034\002\ufff5\005\ufff5\006\ufff5\010\ufff5\014" +
    "\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5" +
    "\100\ufff5\105\ufff5\001\002\000\034\002\ufff7\005\351\006" +
    "\345\010\343\014\035\015\040\020\030\022\031\023\036" +
    "\024\042\050\047\100\044\105\046\001\002\000\004\002" +
    "\uffff\001\002\000\010\002\uffee\010\012\070\uffee\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\030\002\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000" +
    "\004\016\013\001\002\000\004\017\014\001\002\000\004" +
    "\045\015\001\002\000\004\065\016\001\002\000\004\046" +
    "\017\001\002\000\004\047\020\001\002\000\004\071\021" +
    "\001\002\000\004\072\022\001\002\000\004\066\023\001" +
    "\002\000\004\067\024\001\002\000\024\014\ufff5\015\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\100\ufff5\105" +
    "\ufff5\001\002\000\024\014\035\015\040\020\030\022\031" +
    "\023\036\024\042\050\047\100\044\105\046\001\002\000" +
    "\004\070\027\001\002\000\030\002\uffdd\014\uffdd\015\uffdd" +
    "\020\uffdd\022\uffdd\023\uffdd\024\uffdd\050\uffdd\070\uffdd\100" +
    "\uffdd\105\uffdd\001\002\000\004\065\313\001\002\000\004" +
    "\067\303\001\002\000\032\002\ufff5\010\ufff5\014\ufff5\015" +
    "\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5" +
    "\100\ufff5\105\ufff5\001\002\000\032\002\ufff5\010\ufff5\014" +
    "\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5" +
    "\070\ufff5\100\ufff5\105\ufff5\001\002\000\032\002\ufff5\010" +
    "\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000\004\100" +
    "\263\001\002\000\004\065\255\001\002\000\030\002\uffec" +
    "\010\uffec\014\035\015\040\020\030\022\031\023\036\024" +
    "\042\050\047\070\uffec\100\044\001\002\000\004\100\232" +
    "\001\002\000\032\002\ufff5\010\ufff5\014\ufff5\015\ufff5\020" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5\100\ufff5" +
    "\105\ufff5\001\002\000\004\065\136\001\002\000\032\002" +
    "\ufff5\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000" +
    "\006\053\102\062\101\001\002\000\032\002\ufff5\010\ufff5" +
    "\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050" +
    "\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000\036\002\ufff6" +
    "\005\ufff6\006\ufff6\010\ufff6\014\ufff6\015\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\050\ufff6\070\ufff6\100\ufff6\105\ufff6" +
    "\001\002\000\004\075\052\001\002\000\032\002\ufff5\010" +
    "\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000\032\002" +
    "\uffe2\010\uffe2\014\uffe2\015\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\050\uffe2\070\uffe2\100\uffe2\105\046\001\002\000" +
    "\004\051\053\001\002\000\004\075\054\001\002\000\004" +
    "\052\055\001\002\000\004\065\056\001\002\000\012\100" +
    "\061\101\057\102\060\103\063\001\002\000\006\054\uffd9" +
    "\066\uffd9\001\002\000\006\054\uffd8\066\uffd8\001\002\000" +
    "\006\054\uffda\066\uffda\001\002\000\006\054\065\066\uffd3" +
    "\001\002\000\006\054\uffdb\066\uffdb\001\002\000\004\066" +
    "\076\001\002\000\012\100\070\101\066\102\067\103\071" +
    "\001\002\000\006\054\065\066\uffd3\001\002\000\006\054" +
    "\065\066\uffd3\001\002\000\006\054\065\066\uffd3\001\002" +
    "\000\006\054\065\066\uffd3\001\002\000\004\066\uffd7\001" +
    "\002\000\004\066\uffd6\001\002\000\004\066\uffd4\001\002" +
    "\000\004\066\uffd5\001\002\000\004\073\077\001\002\000" +
    "\032\002\uffdc\010\uffdc\014\uffdc\015\uffdc\020\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\050\uffdc\070\uffdc\100\uffdc\105\uffdc\001" +
    "\002\000\032\002\uffea\010\uffea\014\uffea\015\uffea\020\uffea" +
    "\022\uffea\023\uffea\024\uffea\050\uffea\070\uffea\100\uffea\105" +
    "\046\001\002\000\006\101\131\102\132\001\002\000\022" +
    "\055\113\065\106\076\107\077\103\100\110\101\112\102" +
    "\111\103\104\001\002\000\004\073\130\001\002\000\004" +
    "\073\127\001\002\000\014\054\120\055\117\056\121\057" +
    "\116\073\126\001\002\000\014\055\113\065\106\100\110" +
    "\101\112\102\111\001\002\000\004\073\123\001\002\000" +
    "\016\054\uffc1\055\uffc1\056\uffc1\057\uffc1\066\uffc1\073\uffc1" +
    "\001\002\000\016\054\uffbf\055\uffbf\056\uffbf\057\uffbf\066" +
    "\uffbf\073\uffbf\001\002\000\016\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\066\uffc0\073\uffc0\001\002\000\014\055\113\065" +
    "\106\100\110\101\112\102\111\001\002\000\016\054\uffc2" +
    "\055\uffc2\056\121\057\116\066\uffc2\073\uffc2\001\002\000" +
    "\014\055\113\065\106\100\110\101\112\102\111\001\002" +
    "\000\014\055\uffbb\065\uffbb\100\uffbb\101\uffbb\102\uffbb\001" +
    "\002\000\014\055\uffbd\065\uffbd\100\uffbd\101\uffbd\102\uffbd" +
    "\001\002\000\014\055\uffbe\065\uffbe\100\uffbe\101\uffbe\102" +
    "\uffbe\001\002\000\014\055\uffbc\065\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\001\002\000\016\054\120\055\117\056\121\057" +
    "\116\066\uffc4\073\uffc4\001\002\000\032\002\uffc8\010\uffc8" +
    "\014\uffc8\015\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\050" +
    "\uffc8\070\uffc8\100\uffc8\105\uffc8\001\002\000\014\054\120" +
    "\055\117\056\121\057\116\066\125\001\002\000\016\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\066\uffc3\073\uffc3\001\002" +
    "\000\032\002\uffc5\010\uffc5\014\uffc5\015\uffc5\020\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\050\uffc5\070\uffc5\100\uffc5\105\uffc5" +
    "\001\002\000\032\002\uffc6\010\uffc6\014\uffc6\015\uffc6\020" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\050\uffc6\070\uffc6\100\uffc6" +
    "\105\uffc6\001\002\000\032\002\uffc7\010\uffc7\014\uffc7\015" +
    "\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\050\uffc7\070\uffc7" +
    "\100\uffc7\105\uffc7\001\002\000\004\073\134\001\002\000" +
    "\004\073\133\001\002\000\032\002\uffc9\010\uffc9\014\uffc9" +
    "\015\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\050\uffc9\070" +
    "\uffc9\100\uffc9\105\uffc9\001\002\000\032\002\uffca\010\uffca" +
    "\014\uffca\015\uffca\020\uffca\022\uffca\023\uffca\024\uffca\050" +
    "\uffca\070\uffca\100\uffca\105\uffca\001\002\000\032\002\uffe6" +
    "\010\uffe6\014\uffe6\015\uffe6\020\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\050\uffe6\070\uffe6\100\uffe6\105\046\001\002\000\006" +
    "\014\140\100\141\001\002\000\004\066\225\001\002\000" +
    "\004\100\211\001\002\000\004\053\142\001\002\000\006" +
    "\101\143\102\144\001\002\000\004\073\205\001\002\000" +
    "\004\073\145\001\002\000\014\064\151\100\152\101\146" +
    "\102\150\103\153\001\002\000\004\061\201\001\002\000" +
    "\004\073\170\001\002\000\004\061\164\001\002\000\006" +
    "\066\uffb3\073\uffb3\001\002\000\004\061\156\001\002\000" +
    "\004\061\154\001\002\000\004\103\155\001\002\000\006" +
    "\066\uffa7\073\uffa7\001\002\000\014\064\161\100\162\101" +
    "\157\102\160\103\163\001\002\000\006\066\uffb1\073\uffb1" +
    "\001\002\000\006\066\uffb0\073\uffb0\001\002\000\006\066" +
    "\uffb2\073\uffb2\001\002\000\006\066\uffaf\073\uffaf\001\002" +
    "\000\006\066\uffae\073\uffae\001\002\000\010\100\167\101" +
    "\165\102\166\001\002\000\006\066\uffab\073\uffab\001\002" +
    "\000\006\066\uffac\073\uffac\001\002\000\006\066\uffa8\073" +
    "\uffa8\001\002\000\006\063\172\100\171\001\002\000\006" +
    "\062\175\063\176\001\002\000\004\100\174\001\002\000" +
    "\004\066\uffa0\001\002\000\004\066\uff9c\001\002\000\006" +
    "\101\177\102\200\001\002\000\004\066\uff9d\001\002\000" +
    "\004\066\uff9f\001\002\000\004\066\uff9e\001\002\000\010" +
    "\100\204\101\202\102\203\001\002\000\006\066\uffad\073" +
    "\uffad\001\002\000\006\066\uffaa\073\uffaa\001\002\000\006" +
    "\066\uffa9\073\uffa9\001\002\000\014\064\151\100\152\101" +
    "\146\102\150\103\153\001\002\000\004\073\207\001\002" +
    "\000\006\063\172\100\171\001\002\000\004\066\uffa1\001" +
    "\002\000\004\053\212\001\002\000\006\101\213\102\214" +
    "\001\002\000\004\073\221\001\002\000\004\073\215\001" +
    "\002\000\014\064\151\100\152\101\146\102\150\103\153" +
    "\001\002\000\004\073\217\001\002\000\006\063\172\100" +
    "\171\001\002\000\004\066\uffa2\001\002\000\014\064\151" +
    "\100\152\101\146\102\150\103\153\001\002\000\004\073" +
    "\223\001\002\000\006\063\172\100\171\001\002\000\004" +
    "\066\uffa3\001\002\000\004\067\226\001\002\000\024\014" +
    "\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5" +
    "\100\ufff5\105\ufff5\001\002\000\004\070\230\001\002\000" +
    "\032\002\uffa4\010\uffa4\014\uffa4\015\uffa4\020\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\050\uffa4\070\uffa4\100\uffa4\105\uffa4\001" +
    "\002\000\032\002\uffe4\010\uffe4\014\uffe4\015\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\050\uffe4\070\uffe4\100\uffe4\105" +
    "\046\001\002\000\006\053\234\073\233\001\002\000\032" +
    "\002\uffcc\010\uffcc\014\uffcc\015\uffcc\020\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\050\uffcc\070\uffcc\100\uffcc\105\uffcc\001\002" +
    "\000\004\103\235\001\002\000\004\073\236\001\002\000" +
    "\032\002\uffcb\010\uffcb\014\uffcb\015\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\050\uffcb\070\uffcb\100\uffcb\105\uffcb\001" +
    "\002\000\032\002\ufff5\010\ufff5\014\ufff5\015\ufff5\020\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5\100\ufff5\105" +
    "\ufff5\001\002\000\032\002\ufff5\010\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5\100" +
    "\ufff5\105\ufff5\001\002\000\032\002\ufff5\010\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070" +
    "\ufff5\100\ufff5\105\ufff5\001\002\000\032\002\ufff5\010\ufff5" +
    "\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050" +
    "\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000\032\002\ufff5" +
    "\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002\000\032" +
    "\002\ufff5\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\050\ufff5\070\ufff5\100\ufff5\105\ufff5\001\002" +
    "\000\032\002\ufff5\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5\100\ufff5\105\ufff5" +
    "\001\002\000\032\002\uffe3\010\uffe3\014\uffe3\015\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\050\uffe3\070\uffe3\100\uffe3" +
    "\105\046\001\002\000\032\002\uffe7\010\uffe7\014\uffe7\015" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\050\uffe7\070\uffe7" +
    "\100\uffe7\105\046\001\002\000\032\002\uffeb\010\uffeb\014" +
    "\uffeb\015\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\050\uffeb" +
    "\070\uffeb\100\uffeb\105\046\001\002\000\032\002\uffe5\010" +
    "\uffe5\014\uffe5\015\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\050\uffe5\070\uffe5\100\uffe5\105\046\001\002\000\032\002" +
    "\uffe9\010\uffe9\014\uffe9\015\uffe9\020\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\050\uffe9\070\uffe9\100\uffe9\105\046\001\002\000" +
    "\032\002\uffdf\010\uffdf\014\uffdf\015\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\050\uffdf\070\uffdf\100\uffdf\105\046\001" +
    "\002\000\032\002\uffe1\010\uffe1\014\uffe1\015\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\050\uffe1\070\uffe1\100\uffe1\105" +
    "\046\001\002\000\014\064\151\100\152\101\146\102\150" +
    "\103\153\001\002\000\004\066\257\001\002\000\004\067" +
    "\260\001\002\000\024\014\ufff5\015\ufff5\020\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000" +
    "\004\070\262\001\002\000\032\002\uffa6\010\uffa6\014\uffa6" +
    "\015\uffa6\020\uffa6\022\uffa6\023\uffa6\024\uffa6\050\uffa6\070" +
    "\uffa6\100\uffa6\105\uffa6\001\002\000\006\053\265\073\264" +
    "\001\002\000\032\002\uffd2\010\uffd2\014\uffd2\015\uffd2\020" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\050\uffd2\070\uffd2\100\uffd2" +
    "\105\uffd2\001\002\000\014\076\267\077\271\101\266\102" +
    "\270\103\272\001\002\000\004\073\277\001\002\000\004" +
    "\073\276\001\002\000\004\073\275\001\002\000\004\073" +
    "\274\001\002\000\004\073\273\001\002\000\032\002\uffcf" +
    "\010\uffcf\014\uffcf\015\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\050\uffcf\070\uffcf\100\uffcf\105\uffcf\001\002\000\032" +
    "\002\uffcd\010\uffcd\014\uffcd\015\uffcd\020\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\050\uffcd\070\uffcd\100\uffcd\105\uffcd\001\002" +
    "\000\032\002\uffd0\010\uffd0\014\uffd0\015\uffd0\020\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\050\uffd0\070\uffd0\100\uffd0\105\uffd0" +
    "\001\002\000\032\002\uffce\010\uffce\014\uffce\015\uffce\020" +
    "\uffce\022\uffce\023\uffce\024\uffce\050\uffce\070\uffce\100\uffce" +
    "\105\uffce\001\002\000\032\002\uffd1\010\uffd1\014\uffd1\015" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\050\uffd1\070\uffd1" +
    "\100\uffd1\105\uffd1\001\002\000\032\002\uffe8\010\uffe8\014" +
    "\uffe8\015\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\050\uffe8" +
    "\070\uffe8\100\uffe8\105\046\001\002\000\032\002\uffde\010" +
    "\uffde\014\uffde\015\uffde\020\uffde\022\uffde\023\uffde\024\uffde" +
    "\050\uffde\070\uffde\100\uffde\105\046\001\002\000\032\002" +
    "\uffe0\010\uffe0\014\uffe0\015\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\050\uffe0\070\uffe0\100\uffe0\105\046\001\002\000" +
    "\024\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\050\ufff5\100\ufff5\105\ufff5\001\002\000\004\070\305\001" +
    "\002\000\004\023\306\001\002\000\004\065\307\001\002" +
    "\000\014\064\151\100\152\101\146\102\150\103\153\001" +
    "\002\000\004\066\311\001\002\000\004\073\312\001\002" +
    "\000\032\002\uffa5\010\uffa5\014\uffa5\015\uffa5\020\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\050\uffa5\070\uffa5\100\uffa5\105\uffa5" +
    "\001\002\000\014\064\151\100\152\101\146\102\150\103" +
    "\153\001\002\000\004\066\315\001\002\000\004\067\316" +
    "\001\002\000\024\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000\004" +
    "\070\320\001\002\000\034\002\uffba\010\uffba\014\uffba\015" +
    "\uffba\020\uffba\021\321\022\uffba\023\uffba\024\uffba\050\uffba" +
    "\070\uffba\100\uffba\105\uffba\001\002\000\006\020\327\067" +
    "\326\001\002\000\032\002\uffb9\010\uffb9\014\uffb9\015\uffb9" +
    "\020\uffb9\022\uffb9\023\uffb9\024\uffb9\050\uffb9\070\uffb9\100" +
    "\uffb9\105\uffb9\001\002\000\032\002\uffb6\010\uffb6\014\uffb6" +
    "\015\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\050\uffb6\070" +
    "\uffb6\100\uffb6\105\uffb6\001\002\000\034\002\uffb7\010\uffb7" +
    "\014\uffb7\015\uffb7\020\uffb7\021\321\022\uffb7\023\uffb7\024" +
    "\uffb7\050\uffb7\070\uffb7\100\uffb7\105\uffb7\001\002\000\032" +
    "\002\uffb8\010\uffb8\014\uffb8\015\uffb8\020\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\050\uffb8\070\uffb8\100\uffb8\105\uffb8\001\002" +
    "\000\024\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000\004\065\330" +
    "\001\002\000\014\064\151\100\152\101\146\102\150\103" +
    "\153\001\002\000\004\066\332\001\002\000\004\067\333" +
    "\001\002\000\024\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000\004" +
    "\070\335\001\002\000\034\002\uffb5\010\uffb5\014\uffb5\015" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\050\uffb5" +
    "\070\uffb5\100\uffb5\105\uffb5\001\002\000\004\070\337\001" +
    "\002\000\032\002\uffb4\010\uffb4\014\uffb4\015\uffb4\020\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\050\uffb4\070\uffb4\100\uffb4\105" +
    "\uffb4\001\002\000\030\002\ufff1\014\035\015\040\020\030" +
    "\022\031\023\036\024\042\050\047\070\ufff1\100\044\105" +
    "\046\001\002\000\006\002\uffef\070\uffef\001\002\000\026" +
    "\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000\006\013\373" +
    "\016\013\001\002\000\006\002\ufff5\105\ufff5\001\002\000" +
    "\004\016\367\001\002\000\030\006\ufff5\010\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\100" +
    "\ufff5\105\ufff5\001\002\000\030\002\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050\ufff5\070\ufff5\100" +
    "\ufff5\105\ufff5\001\002\000\004\002\000\001\002\000\004" +
    "\104\352\001\002\000\004\073\353\001\002\000\030\006" +
    "\ufff4\010\ufff4\014\ufff4\015\ufff4\020\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\050\ufff4\100\ufff4\105\ufff4\001\002\000\030\002" +
    "\uffed\014\035\015\040\020\030\022\031\023\036\024\042" +
    "\050\047\070\uffed\100\044\105\046\001\002\000\006\002" +
    "\ufff0\070\ufff0\001\002\000\030\006\345\010\343\014\035" +
    "\015\040\020\030\022\031\023\036\024\042\050\047\100" +
    "\044\105\046\001\002\000\004\002\ufff8\001\002\000\026" +
    "\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\050\ufff5\100\ufff5\105\ufff5\001\002\000\006\002\ufff5" +
    "\105\ufff5\001\002\000\006\002\ufffc\105\046\001\002\000" +
    "\026\010\343\014\035\015\040\020\030\022\031\023\036" +
    "\024\042\050\047\100\044\105\046\001\002\000\004\002" +
    "\ufffa\001\002\000\006\002\ufff5\105\ufff5\001\002\000\006" +
    "\002\ufffe\105\046\001\002\000\004\007\370\001\002\000" +
    "\004\073\371\001\002\000\026\010\ufff3\014\ufff3\015\ufff3" +
    "\020\ufff3\022\ufff3\023\ufff3\024\ufff3\050\ufff3\100\ufff3\105" +
    "\ufff3\001\002\000\006\002\ufffb\105\046\001\002\000\004" +
    "\104\374\001\002\000\004\067\375\001\002\000\026\010" +
    "\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\050\ufff5\100\ufff5\105\ufff5\001\002\000\026\010\012\014" +
    "\035\015\040\020\030\022\031\023\036\024\042\050\047" +
    "\100\044\105\046\001\002\000\004\070\u0100\001\002\000" +
    "\006\002\ufff2\105\ufff2\001\002\000\026\010\343\014\035" +
    "\015\040\020\030\022\031\023\036\024\042\050\047\100" +
    "\044\105\046\001\002\000\004\002\ufff9\001\002\000\006" +
    "\002\ufff5\105\ufff5\001\002\000\006\002\ufffd\105\046\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\012\002\006\004\003\011\004\012\005\001" +
    "\001\000\034\003\347\006\345\007\341\010\343\013\036" +
    "\014\044\017\346\020\033\021\042\025\040\031\047\032" +
    "\031\033\032\001\001\000\002\001\001\000\004\017\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\337\012\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\024\012\025\001" +
    "\001\000\022\013\036\014\044\020\033\021\042\025\040" +
    "\031\047\032\031\033\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\301\001\001\000\004\004\300\001\001\000\004\004" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\242\020\240\021\243\025\241\031\244\032\236\033" +
    "\237\001\001\000\002\001\001\000\004\004\230\001\001" +
    "\000\002\001\001\000\004\004\134\001\001\000\002\001" +
    "\001\000\004\004\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\074\001\001\000\004\016\073\001\001\000\004" +
    "\016\072\001\001\000\004\016\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\114\001\001\000\004\022" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\113\001\001\000" +
    "\004\023\114\001\001\000\004\022\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\114\001\001\000\002\001\001\000\004" +
    "\023\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\205\001\001" +
    "\000\002\001\001\000\004\024\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\215\001\001\000\002\001" +
    "\001\000\004\024\217\001\001\000\002\001\001\000\004" +
    "\034\221\001\001\000\002\001\001\000\004\024\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\024" +
    "\012\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\253\001\001\000\004\004\252\001\001\000\004\004\251" +
    "\001\001\000\004\004\250\001\001\000\004\004\247\001" +
    "\001\000\004\004\246\001\001\000\004\004\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\024\012\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\024\012\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\024\012\316\001\001" +
    "\000\002\001\001\000\010\026\321\027\323\030\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\324\027\323\030\322\001\001\000\002\001" +
    "\001\000\006\004\024\012\335\001\001\000\002\001\001" +
    "\000\004\034\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\024\012\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\036\014\044\020\033\021\042\025\040\031\047" +
    "\032\031\033\032\001\001\000\002\001\001\000\010\004" +
    "\u0100\011\u0101\012\005\001\001\000\002\001\001\000\004" +
    "\004\371\001\001\000\002\001\001\000\010\004\355\011" +
    "\356\012\005\001\001\000\006\004\353\012\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\036\014\044\020\033\021\042" +
    "\025\040\031\047\032\031\033\032\001\001\000\002\001" +
    "\001\000\030\007\357\010\360\013\036\014\044\017\346" +
    "\020\033\021\042\025\040\031\047\032\031\033\032\001" +
    "\001\000\002\001\001\000\010\004\362\011\363\012\005" +
    "\001\001\000\004\004\361\001\001\000\002\001\001\000" +
    "\026\010\364\013\036\014\044\017\346\020\033\021\042" +
    "\025\040\031\047\032\031\033\032\001\001\000\002\001" +
    "\001\000\004\004\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\375" +
    "\011\376\012\005\001\001\000\024\013\036\014\044\017" +
    "\346\020\033\021\042\025\040\031\047\032\031\033\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\u0102\013\036\014\044\017\346\020\033\021\042\025\040" +
    "\031\047\032\031\033\032\001\001\000\002\001\001\000" +
    "\004\004\u0103\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION_RPTR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_RPTR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_RPTR ::= Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_RPTR ::= Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RPTR ::= Rptr Parentesis_a SENTENCIA_RPTR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RPTR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EJT_MTRT ::= Ejt Llave_a SENTENCIA Llave_c Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJT_MTRT",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MTRT ::= Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MTRT",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Cadena Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND_CONDCC ::= Condcc Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_CONDCC",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND_ANIDADO ::= Condcc Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_ANIDADO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND_COMPLEMENTOS ::= COND_CONDCC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND_COMPLEMENTOS ::= COND_ANIDADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND_COMPLEMENTOS ::= COND_ANIDADO COND_COMPLEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c COND_COMPLEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONES ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONES ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACIONES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONES ::= Resta OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES ::= Parentesis_a OPERACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES ::= OPERACIONES OP OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= Identificador Igual OPERACIONES P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION ::= Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIGNACION ::= Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= Identificador Op_atribucion Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= Identificador Op_atribucion Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Tx Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Tx Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_dato Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_dato Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_dato Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_dato Identificador Igual Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_dato Identificador Igual Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTECIA_IMPRESION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTECIA_IMPRESION ::= Suma Numero_negativo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTECIA_IMPRESION ::= Suma Numero_positivo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTECIA_IMPRESION ::= Suma Identificador SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTECIA_IMPRESION ::= Suma Cadena SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INICIO_SENTECIA_IMPRESION ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INICIO_SENTECIA_IMPRESION ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INICIO_SENTECIA_IMPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INICIO_SENTECIA_IMPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IMPRESION ::= Sysm Punto Ot Punto Impr Parentesis_a INICIO_SENTECIA_IMPRESION SENTECIA_IMPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO_MAIN ::= Plub Stc Vid Min Parentesis_a Strg Ars Corchete_a Corchete_c Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_MAIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_COMPUESTA ::= RPTR SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA RPTR SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_COMPUESTA ::= EJT_MTRT SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA EJT_MTRT SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_COMPUESTA ::= MTRT SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA MTRT SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_COMPUESTA ::= COND SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA COND SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_COMPUESTA ::= ASIGNACION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA ASIGNACION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_COMPUESTA ::= DECLARACION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA DECLARACION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_COMPUESTA ::= IMPRESION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_COMPUESTA ::= SENTENCIA_COMPUESTA IMPRESION SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_COMPUESTA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SALTOS_LINEA SENTENCIA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_CLASE ::= SALTOS_LINEA METODO_MAIN SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_CLASE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_CLASE ::= SALTOS_LINEA METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLASE ::= Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPORTACION ::= Imprt Stc Jtcs P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPORTACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PAQUETE ::= Pckg IdentClasePaquete P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAQUETE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SALTOS_LINEA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALTOS_LINEA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SALTOS_LINEA ::= SALTOS_LINEA S_linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALTOS_LINEA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO_COMPUESTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO_COMPUESTO ::= PAQUETE SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO_COMPUESTO ::= IMPORTACION SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO_COMPUESTO ::= PAQUETE SALTOS_LINEA IMPORTACION SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO_COMPUESTO ::= CLASE SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_COMPUESTO ::= PAQUETE SALTOS_LINEA CLASE SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_COMPUESTO ::= IMPORTACION SALTOS_LINEA CLASE SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_COMPUESTO ::= PAQUETE SALTOS_LINEA IMPORTACION SALTOS_LINEA CLASE SALTOS_LINEA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_COMPUESTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SALTOS_LINEA INICIO_COMPUESTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

