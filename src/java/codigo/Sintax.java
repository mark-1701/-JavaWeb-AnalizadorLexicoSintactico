
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 25 00:03:50 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 25 00:03:50 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\017\000\002\002" +
    "\013\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\010\017\000\002\005\014\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\002\000\002\011\005\000\002\011\007\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\005\000\002\011\007\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\016\011" +
    "\000\002\016\012\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\020\012\000\002\021\006\000\002" +
    "\025\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\022\011\000\002\023\013\000\002\024\011\000\002\026" +
    "\012\000\002\026\012\000\002\026\011\000\002\026\011" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\005\004\001\002\000\004\104\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\073\010\001\002\000\006\006\012\010\011\001" +
    "\002\000\004\013\336\001\002\000\004\016\013\001\002" +
    "\000\004\007\014\001\002\000\004\073\015\001\002\000" +
    "\004\010\016\001\002\000\004\013\017\001\002\000\004" +
    "\104\020\001\002\000\004\067\021\001\002\000\024\010" +
    "\033\014\034\015\022\020\037\022\041\023\044\024\026" +
    "\050\025\100\032\001\002\000\004\100\331\001\002\000" +
    "\026\010\ufff0\014\ufff0\015\ufff0\020\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\050\ufff0\070\ufff0\100\ufff0\001\002\000\026\010" +
    "\uffee\014\uffee\015\uffee\020\uffee\022\uffee\023\uffee\024\uffee" +
    "\050\uffee\070\uffee\100\uffee\001\002\000\004\075\303\001" +
    "\002\000\004\065\235\001\002\000\026\010\033\014\034" +
    "\015\022\020\037\022\041\023\044\024\026\050\025\070" +
    "\ufffb\100\032\001\002\000\026\010\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\050\ufff6\070\ufff6\100" +
    "\ufff6\001\002\000\026\010\uffec\014\uffec\015\uffec\020\uffec" +
    "\022\uffec\023\uffec\024\uffec\050\uffec\070\uffec\100\uffec\001" +
    "\002\000\006\053\200\062\177\001\002\000\004\016\163" +
    "\001\002\000\004\100\146\001\002\000\026\010\ufff4\014" +
    "\ufff4\015\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\050\ufff4" +
    "\070\ufff4\100\ufff4\001\002\000\024\014\034\015\022\020" +
    "\037\022\041\023\044\024\026\050\025\070\ufffa\100\032" +
    "\001\002\000\004\065\120\001\002\000\026\010\ufff2\014" +
    "\ufff2\015\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\050\ufff2" +
    "\070\ufff2\100\ufff2\001\002\000\004\067\110\001\002\000" +
    "\004\070\107\001\002\000\026\010\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\050\ufff8\070\ufff8\100" +
    "\ufff8\001\002\000\004\065\045\001\002\000\014\064\051" +
    "\100\052\101\046\102\047\103\053\001\002\000\004\061" +
    "\103\001\002\000\004\061\077\001\002\000\004\066\064" +
    "\001\002\000\006\066\uffc1\073\uffc1\001\002\000\004\061" +
    "\056\001\002\000\004\061\054\001\002\000\004\103\055" +
    "\001\002\000\006\066\uffb5\073\uffb5\001\002\000\014\064" +
    "\061\100\062\101\057\102\060\103\063\001\002\000\006" +
    "\066\uffbf\073\uffbf\001\002\000\006\066\uffbe\073\uffbe\001" +
    "\002\000\006\066\uffc0\073\uffc0\001\002\000\006\066\uffbd" +
    "\073\uffbd\001\002\000\006\066\uffbc\073\uffbc\001\002\000" +
    "\004\067\065\001\002\000\022\014\034\015\022\020\037" +
    "\022\041\023\044\024\026\050\025\100\032\001\002\000" +
    "\024\014\034\015\022\020\037\022\041\023\044\024\026" +
    "\050\025\070\073\100\032\001\002\000\026\010\uffef\014" +
    "\uffef\015\uffef\020\uffef\022\uffef\023\uffef\024\uffef\050\uffef" +
    "\070\uffef\100\uffef\001\002\000\026\010\uffed\014\uffed\015" +
    "\uffed\020\uffed\022\uffed\023\uffed\024\uffed\050\uffed\070\uffed" +
    "\100\uffed\001\002\000\026\010\ufff7\014\ufff7\015\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\050\ufff7\070\ufff7\100\ufff7" +
    "\001\002\000\026\010\ufff3\014\ufff3\015\ufff3\020\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\050\ufff3\070\ufff3\100\ufff3\001\002" +
    "\000\026\010\uffb4\014\uffb4\015\uffb4\020\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\050\uffb4\070\uffb4\100\uffb4\001\002\000\026" +
    "\010\ufff5\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\050\ufff5\070\ufff5\100\ufff5\001\002\000\026\010\ufff9" +
    "\014\ufff9\015\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\050" +
    "\ufff9\070\ufff9\100\ufff9\001\002\000\026\010\ufff1\014\ufff1" +
    "\015\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\050\ufff1\070" +
    "\ufff1\100\ufff1\001\002\000\010\100\102\101\100\102\101" +
    "\001\002\000\006\066\uffb9\073\uffb9\001\002\000\006\066" +
    "\uffba\073\uffba\001\002\000\006\066\uffb6\073\uffb6\001\002" +
    "\000\010\100\106\101\104\102\105\001\002\000\006\066" +
    "\uffbb\073\uffbb\001\002\000\006\066\uffb8\073\uffb8\001\002" +
    "\000\006\066\uffb7\073\uffb7\001\002\000\004\002\000\001" +
    "\002\000\022\014\034\015\022\020\037\022\041\023\044" +
    "\024\026\050\025\100\032\001\002\000\024\014\034\015" +
    "\022\020\037\022\041\023\044\024\026\050\025\070\112" +
    "\100\032\001\002\000\004\023\113\001\002\000\004\065" +
    "\114\001\002\000\014\064\051\100\052\101\046\102\047" +
    "\103\053\001\002\000\004\066\116\001\002\000\004\073" +
    "\117\001\002\000\026\010\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\050\uffb3\070\uffb3\100\uffb3\001" +
    "\002\000\014\064\051\100\052\101\046\102\047\103\053" +
    "\001\002\000\004\066\122\001\002\000\004\067\123\001" +
    "\002\000\022\014\034\015\022\020\037\022\041\023\044" +
    "\024\026\050\025\100\032\001\002\000\024\014\034\015" +
    "\022\020\037\022\041\023\044\024\026\050\025\070\125" +
    "\100\032\001\002\000\030\010\uffc8\014\uffc8\015\uffc8\020" +
    "\uffc8\021\126\022\uffc8\023\uffc8\024\uffc8\050\uffc8\070\uffc8" +
    "\100\uffc8\001\002\000\006\020\134\067\133\001\002\000" +
    "\026\010\uffc7\014\uffc7\015\uffc7\020\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\050\uffc7\070\uffc7\100\uffc7\001\002\000\026\010" +
    "\uffc4\014\uffc4\015\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\050\uffc4\070\uffc4\100\uffc4\001\002\000\030\010\uffc5\014" +
    "\uffc5\015\uffc5\020\uffc5\021\126\022\uffc5\023\uffc5\024\uffc5" +
    "\050\uffc5\070\uffc5\100\uffc5\001\002\000\026\010\uffc6\014" +
    "\uffc6\015\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\050\uffc6" +
    "\070\uffc6\100\uffc6\001\002\000\022\014\034\015\022\020" +
    "\037\022\041\023\044\024\026\050\025\100\032\001\002" +
    "\000\004\065\135\001\002\000\014\064\051\100\052\101" +
    "\046\102\047\103\053\001\002\000\004\066\137\001\002" +
    "\000\004\067\140\001\002\000\022\014\034\015\022\020" +
    "\037\022\041\023\044\024\026\050\025\100\032\001\002" +
    "\000\024\014\034\015\022\020\037\022\041\023\044\024" +
    "\026\050\025\070\142\100\032\001\002\000\030\010\uffc3" +
    "\014\uffc3\015\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\050\uffc3\070\uffc3\100\uffc3\001\002\000\024\014\034" +
    "\015\022\020\037\022\041\023\044\024\026\050\025\070" +
    "\144\100\032\001\002\000\026\010\uffc2\014\uffc2\015\uffc2" +
    "\020\uffc2\022\uffc2\023\uffc2\024\uffc2\050\uffc2\070\uffc2\100" +
    "\uffc2\001\002\000\024\014\034\015\022\020\037\022\041" +
    "\023\044\024\026\050\025\070\ufffd\100\032\001\002\000" +
    "\006\053\150\073\147\001\002\000\026\010\uffe0\014\uffe0" +
    "\015\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\050\uffe0\070" +
    "\uffe0\100\uffe0\001\002\000\014\076\152\077\154\101\151" +
    "\102\153\103\155\001\002\000\004\073\162\001\002\000" +
    "\004\073\161\001\002\000\004\073\160\001\002\000\004" +
    "\073\157\001\002\000\004\073\156\001\002\000\026\010" +
    "\uffdd\014\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\050\uffdd\070\uffdd\100\uffdd\001\002\000\026\010\uffdb\014" +
    "\uffdb\015\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\050\uffdb" +
    "\070\uffdb\100\uffdb\001\002\000\026\010\uffde\014\uffde\015" +
    "\uffde\020\uffde\022\uffde\023\uffde\024\uffde\050\uffde\070\uffde" +
    "\100\uffde\001\002\000\026\010\uffdc\014\uffdc\015\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\050\uffdc\070\uffdc\100\uffdc" +
    "\001\002\000\026\010\uffdf\014\uffdf\015\uffdf\020\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\050\uffdf\070\uffdf\100\uffdf\001\002" +
    "\000\004\017\164\001\002\000\004\045\165\001\002\000" +
    "\004\065\166\001\002\000\004\046\167\001\002\000\004" +
    "\047\170\001\002\000\004\071\171\001\002\000\004\072" +
    "\172\001\002\000\004\066\173\001\002\000\004\067\174" +
    "\001\002\000\022\014\034\015\022\020\037\022\041\023" +
    "\044\024\026\050\025\100\032\001\002\000\024\014\034" +
    "\015\022\020\037\022\041\023\044\024\026\050\025\070" +
    "\176\100\032\001\002\000\024\014\uffeb\015\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\050\uffeb\070\uffeb\100\uffeb\001" +
    "\002\000\006\101\227\102\230\001\002\000\022\055\211" +
    "\065\204\076\205\077\201\100\206\101\210\102\207\103" +
    "\202\001\002\000\004\073\226\001\002\000\004\073\225" +
    "\001\002\000\014\054\216\055\215\056\217\057\214\073" +
    "\224\001\002\000\014\055\211\065\204\100\206\101\210" +
    "\102\207\001\002\000\004\073\221\001\002\000\016\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\066\uffcf\073\uffcf\001\002" +
    "\000\016\054\uffcd\055\uffcd\056\uffcd\057\uffcd\066\uffcd\073" +
    "\uffcd\001\002\000\016\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\066\uffce\073\uffce\001\002\000\014\055\211\065\204\100" +
    "\206\101\210\102\207\001\002\000\016\054\uffd0\055\uffd0" +
    "\056\217\057\214\066\uffd0\073\uffd0\001\002\000\014\055" +
    "\211\065\204\100\206\101\210\102\207\001\002\000\014" +
    "\055\uffc9\065\uffc9\100\uffc9\101\uffc9\102\uffc9\001\002\000" +
    "\014\055\uffcb\065\uffcb\100\uffcb\101\uffcb\102\uffcb\001\002" +
    "\000\014\055\uffcc\065\uffcc\100\uffcc\101\uffcc\102\uffcc\001" +
    "\002\000\014\055\uffca\065\uffca\100\uffca\101\uffca\102\uffca" +
    "\001\002\000\016\054\216\055\215\056\217\057\214\066" +
    "\uffd2\073\uffd2\001\002\000\026\010\uffd6\014\uffd6\015\uffd6" +
    "\020\uffd6\022\uffd6\023\uffd6\024\uffd6\050\uffd6\070\uffd6\100" +
    "\uffd6\001\002\000\014\054\216\055\215\056\217\057\214" +
    "\066\223\001\002\000\016\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\066\uffd1\073\uffd1\001\002\000\026\010\uffd3\014\uffd3" +
    "\015\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\050\uffd3\070" +
    "\uffd3\100\uffd3\001\002\000\026\010\uffd4\014\uffd4\015\uffd4" +
    "\020\uffd4\022\uffd4\023\uffd4\024\uffd4\050\uffd4\070\uffd4\100" +
    "\uffd4\001\002\000\026\010\uffd5\014\uffd5\015\uffd5\020\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\050\uffd5\070\uffd5\100\uffd5\001" +
    "\002\000\004\073\232\001\002\000\004\073\231\001\002" +
    "\000\026\010\uffd7\014\uffd7\015\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\050\uffd7\070\uffd7\100\uffd7\001\002\000\026" +
    "\010\uffd8\014\uffd8\015\uffd8\020\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\050\uffd8\070\uffd8\100\uffd8\001\002\000\024\014\034" +
    "\015\022\020\037\022\041\023\044\024\026\050\025\070" +
    "\ufffe\100\032\001\002\000\024\014\034\015\022\020\037" +
    "\022\041\023\044\024\026\050\025\070\ufffc\100\032\001" +
    "\002\000\006\014\237\100\240\001\002\000\004\066\277" +
    "\001\002\000\004\100\263\001\002\000\004\053\241\001" +
    "\002\000\006\101\242\102\243\001\002\000\004\073\257" +
    "\001\002\000\004\073\244\001\002\000\014\064\051\100" +
    "\052\101\046\102\047\103\053\001\002\000\004\073\246" +
    "\001\002\000\006\063\247\100\251\001\002\000\004\100" +
    "\256\001\002\000\004\066\uffae\001\002\000\006\062\252" +
    "\063\253\001\002\000\006\101\254\102\255\001\002\000" +
    "\004\066\uffab\001\002\000\004\066\uffad\001\002\000\004" +
    "\066\uffac\001\002\000\004\066\uffaa\001\002\000\014\064" +
    "\051\100\052\101\046\102\047\103\053\001\002\000\004" +
    "\073\261\001\002\000\006\063\247\100\251\001\002\000" +
    "\004\066\uffaf\001\002\000\004\053\264\001\002\000\006" +
    "\101\265\102\266\001\002\000\004\073\273\001\002\000" +
    "\004\073\267\001\002\000\014\064\051\100\052\101\046" +
    "\102\047\103\053\001\002\000\004\073\271\001\002\000" +
    "\006\063\247\100\251\001\002\000\004\066\uffb0\001\002" +
    "\000\014\064\051\100\052\101\046\102\047\103\053\001" +
    "\002\000\004\073\275\001\002\000\006\063\247\100\251" +
    "\001\002\000\004\066\uffb1\001\002\000\004\067\300\001" +
    "\002\000\022\014\034\015\022\020\037\022\041\023\044" +
    "\024\026\050\025\100\032\001\002\000\024\014\034\015" +
    "\022\020\037\022\041\023\044\024\026\050\025\070\302" +
    "\100\032\001\002\000\026\010\uffb2\014\uffb2\015\uffb2\020" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\050\uffb2\070\uffb2\100\uffb2" +
    "\001\002\000\004\051\304\001\002\000\004\075\305\001" +
    "\002\000\004\052\306\001\002\000\004\065\307\001\002" +
    "\000\012\100\312\101\310\102\311\103\314\001\002\000" +
    "\006\054\uffe7\066\uffe7\001\002\000\006\054\uffe6\066\uffe6" +
    "\001\002\000\006\054\uffe8\066\uffe8\001\002\000\006\054" +
    "\316\066\uffe1\001\002\000\006\054\uffe9\066\uffe9\001\002" +
    "\000\004\066\327\001\002\000\012\100\321\101\317\102" +
    "\320\103\322\001\002\000\006\054\316\066\uffe1\001\002" +
    "\000\006\054\316\066\uffe1\001\002\000\006\054\316\066" +
    "\uffe1\001\002\000\006\054\316\066\uffe1\001\002\000\004" +
    "\066\uffe5\001\002\000\004\066\uffe4\001\002\000\004\066" +
    "\uffe2\001\002\000\004\066\uffe3\001\002\000\004\073\330" +
    "\001\002\000\026\010\uffea\014\uffea\015\uffea\020\uffea\022" +
    "\uffea\023\uffea\024\uffea\050\uffea\070\uffea\100\uffea\001\002" +
    "\000\006\053\333\073\332\001\002\000\026\010\uffda\014" +
    "\uffda\015\uffda\020\uffda\022\uffda\023\uffda\024\uffda\050\uffda" +
    "\070\uffda\100\uffda\001\002\000\004\103\334\001\002\000" +
    "\004\073\335\001\002\000\026\010\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\022\uffd9\023\uffd9\024\uffd9\050\uffd9\070\uffd9\100" +
    "\uffd9\001\002\000\004\104\337\001\002\000\004\067\340" +
    "\001\002\000\024\010\033\014\034\015\022\020\037\022" +
    "\041\023\044\024\026\050\025\100\032\001\002\000\004" +
    "\070\342\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\041\004" +
    "\026\005\042\010\035\011\027\012\034\016\037\022\022" +
    "\023\023\024\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\074\010\232\011\070\012\073\016\071\022" +
    "\075\023\066\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\144\005\042\011\027" +
    "\012\034\016\037\022\022\023\023\024\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\065\005\042\011\027\012\034\016\037\022\022\023" +
    "\023\024\030\001\001\000\020\005\074\011\070\012\073" +
    "\016\071\022\075\023\066\024\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\110\005\042\011\027\012\034\016\037\022" +
    "\022\023\023\024\030\001\001\000\020\005\074\011\070" +
    "\012\073\016\071\022\075\023\066\024\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\123\005\042\011\027\012\034\016\037\022" +
    "\022\023\023\024\030\001\001\000\020\005\074\011\070" +
    "\012\073\016\071\022\075\023\066\024\067\001\001\000" +
    "\010\017\126\020\130\021\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\131\020" +
    "\130\021\127\001\001\000\002\001\001\000\022\004\142" +
    "\005\042\011\027\012\034\016\037\022\022\023\023\024" +
    "\030\001\001\000\002\001\001\000\004\025\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\140\005" +
    "\042\011\027\012\034\016\037\022\022\023\023\024\030" +
    "\001\001\000\020\005\074\011\070\012\073\016\071\022" +
    "\075\023\066\024\067\001\001\000\002\001\001\000\020" +
    "\005\074\011\070\012\073\016\071\022\075\023\066\024" +
    "\067\001\001\000\002\001\001\000\020\005\074\011\070" +
    "\012\073\016\071\022\075\023\066\024\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\174" +
    "\005\042\011\027\012\034\016\037\022\022\023\023\024" +
    "\030\001\001\000\020\005\074\011\070\012\073\016\071" +
    "\022\075\023\066\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\212\001\001\000\004\013" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\211\001\001\000" +
    "\004\014\212\001\001\000\004\013\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\212\001\001\000\002\001\001\000\004" +
    "\014\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\233\005\042\011\027\012\034\016\037\022\022\023\023" +
    "\024\030\001\001\000\020\005\074\011\070\012\073\016" +
    "\071\022\075\023\066\024\067\001\001\000\004\026\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\244\001\001\000\002\001\001\000\004\015" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\257" +
    "\001\001\000\002\001\001\000\004\015\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\267\001\001\000" +
    "\002\001\001\000\004\015\271\001\001\000\002\001\001" +
    "\000\004\025\273\001\001\000\002\001\001\000\004\015" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\300\005\042\011\027\012\034\016\037\022\022\023" +
    "\023\024\030\001\001\000\020\005\074\011\070\012\073" +
    "\016\071\022\075\023\066\024\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\325\001\001\000\004\007\324\001\001" +
    "\000\004\007\323\001\001\000\004\007\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\340\004\026\005\042\010\035\011\027\012\034" +
    "\016\037\022\022\023\023\024\030\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_RPTR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_RPTR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_RPTR ::= Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_RPTR ::= Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RPTR ::= Rptr Parentesis_a SENTENCIA_RPTR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EJT_MTRT ::= Ejt Llave_a SENTENCIA Llave_c Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJT_MTRT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MTRT ::= Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MTRT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Cadena Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND_CONDCC ::= Condcc Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_CONDCC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND_ANIDADO ::= Condcc Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_ANIDADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND_COMPLEMENTOS ::= COND_CONDCC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND_COMPLEMENTOS ::= COND_ANIDADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND_COMPLEMENTOS ::= COND_ANIDADO COND_COMPLEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_COMPLEMENTOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c COND_COMPLEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACIONES ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACIONES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACIONES ::= Resta OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACIONES ::= Parentesis_a OPERACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACIONES ::= OPERACIONES OP OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= Identificador Igual OPERACIONES P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= Identificador Op_atribucion Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= Identificador Op_atribucion Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Tx Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Tx Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_dato Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_dato Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_dato Identificador Igual Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Identificador Igual Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTECIA_IMPRESION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTECIA_IMPRESION ::= Suma Numero_negativo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTECIA_IMPRESION ::= Suma Numero_positivo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTECIA_IMPRESION ::= Suma Identificador SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTECIA_IMPRESION ::= Suma Cadena SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO_SENTECIA_IMPRESION ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO_SENTECIA_IMPRESION ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO_SENTECIA_IMPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO_SENTECIA_IMPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= Sysm Punto Ot Punto Impr Parentesis_a INICIO_SENTECIA_IMPRESION SENTECIA_IMPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO_MAIN ::= Plub Stc Vid Min Parentesis_a Strg Ars Corchete_a Corchete_c Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= EJT_MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA EJT_MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA_CLASE ::= METODO_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_CLASE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_CLASE ::= METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pckg IdentClasePaquete P_coma Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pckg IdentClasePaquete P_coma Imprt Stc Jtcs P_coma Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

