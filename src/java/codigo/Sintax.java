
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 24 16:15:06 CST 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 24 16:15:06 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\017\000\002\002" +
    "\013\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\010\017\000\002" +
    "\005\014\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\002\000" +
    "\002\011\005\000\002\011\007\000\002\011\007\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\011" +
    "\005\000\002\011\007\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\016\011\000\002\023\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\017\015\000" +
    "\002\020\011\000\002\021\013\000\002\022\011\000\002" +
    "\024\012\000\002\024\012\000\002\024\011\000\002\024" +
    "\011\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\005\004\001\002\000\004\104\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\073\010\001\002\000\006\006\012\010\011\001" +
    "\002\000\004\013\325\001\002\000\004\016\013\001\002" +
    "\000\004\007\014\001\002\000\004\073\015\001\002\000" +
    "\004\010\016\001\002\000\004\013\017\001\002\000\004" +
    "\104\020\001\002\000\004\067\021\001\002\000\024\010" +
    "\034\014\035\015\022\020\040\022\042\023\045\024\026" +
    "\050\025\100\033\001\002\000\004\100\320\001\002\000" +
    "\026\010\uffee\014\uffee\015\uffee\020\uffee\022\uffee\023\uffee" +
    "\024\uffee\050\uffee\070\uffee\100\uffee\001\002\000\026\010" +
    "\uffec\014\uffec\015\uffec\020\uffec\022\uffec\023\uffec\024\uffec" +
    "\050\uffec\070\uffec\100\uffec\001\002\000\004\075\272\001" +
    "\002\000\004\065\224\001\002\000\026\010\034\014\035" +
    "\015\022\020\040\022\042\023\045\024\026\050\025\070" +
    "\ufffb\100\033\001\002\000\026\010\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\050\ufff6\070\ufff6\100" +
    "\ufff6\001\002\000\026\010\ufff0\014\ufff0\015\ufff0\020\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\050\ufff0\070\ufff0\100\ufff0\001" +
    "\002\000\026\010\uffea\014\uffea\015\uffea\020\uffea\022\uffea" +
    "\023\uffea\024\uffea\050\uffea\070\uffea\100\uffea\001\002\000" +
    "\006\053\167\062\166\001\002\000\004\016\152\001\002" +
    "\000\004\100\135\001\002\000\026\010\ufff4\014\ufff4\015" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\050\ufff4\070\ufff4" +
    "\100\ufff4\001\002\000\024\014\035\015\022\020\040\022" +
    "\042\023\045\024\026\050\025\070\ufffa\100\033\001\002" +
    "\000\004\065\122\001\002\000\026\010\ufff2\014\ufff2\015" +
    "\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\050\ufff2\070\ufff2" +
    "\100\ufff2\001\002\000\004\067\112\001\002\000\004\070" +
    "\111\001\002\000\026\010\ufff8\014\ufff8\015\ufff8\020\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\050\ufff8\070\ufff8\100\ufff8\001" +
    "\002\000\004\065\046\001\002\000\014\064\052\100\053" +
    "\101\047\102\050\103\054\001\002\000\004\061\105\001" +
    "\002\000\004\061\101\001\002\000\004\066\065\001\002" +
    "\000\006\066\uffc5\073\uffc5\001\002\000\004\061\057\001" +
    "\002\000\004\061\055\001\002\000\004\103\056\001\002" +
    "\000\006\066\uffb9\073\uffb9\001\002\000\014\064\062\100" +
    "\063\101\060\102\061\103\064\001\002\000\006\066\uffc3" +
    "\073\uffc3\001\002\000\006\066\uffc2\073\uffc2\001\002\000" +
    "\006\066\uffc4\073\uffc4\001\002\000\006\066\uffc1\073\uffc1" +
    "\001\002\000\006\066\uffc0\073\uffc0\001\002\000\004\067" +
    "\066\001\002\000\022\014\035\015\022\020\040\022\042" +
    "\023\045\024\026\050\025\100\033\001\002\000\024\014" +
    "\035\015\022\020\040\022\042\023\045\024\026\050\025" +
    "\070\074\100\033\001\002\000\026\010\uffed\014\uffed\015" +
    "\uffed\020\uffed\022\uffed\023\uffed\024\uffed\050\uffed\070\uffed" +
    "\100\uffed\001\002\000\026\010\uffeb\014\uffeb\015\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\050\uffeb\070\uffeb\100\uffeb" +
    "\001\002\000\026\010\ufff7\014\ufff7\015\ufff7\020\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\050\ufff7\070\ufff7\100\ufff7\001\002" +
    "\000\026\010\ufff3\014\ufff3\015\ufff3\020\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\050\ufff3\070\ufff3\100\ufff3\001\002\000\026" +
    "\010\uffb7\014\uffb7\015\uffb7\020\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\050\uffb7\070\uffb7\100\uffb7\001\002\000\026\010\ufff5" +
    "\014\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\050" +
    "\ufff5\070\ufff5\100\ufff5\001\002\000\026\010\ufff9\014\ufff9" +
    "\015\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\050\ufff9\070" +
    "\ufff9\100\ufff9\001\002\000\026\010\ufff1\014\ufff1\015\ufff1" +
    "\020\ufff1\022\ufff1\023\ufff1\024\ufff1\050\ufff1\070\ufff1\100" +
    "\ufff1\001\002\000\026\010\uffef\014\uffef\015\uffef\020\uffef" +
    "\022\uffef\023\uffef\024\uffef\050\uffef\070\uffef\100\uffef\001" +
    "\002\000\010\100\104\101\102\102\103\001\002\000\006" +
    "\066\uffbd\073\uffbd\001\002\000\006\066\uffbe\073\uffbe\001" +
    "\002\000\006\066\uffba\073\uffba\001\002\000\010\100\110" +
    "\101\106\102\107\001\002\000\006\066\uffbf\073\uffbf\001" +
    "\002\000\006\066\uffbc\073\uffbc\001\002\000\006\066\uffbb" +
    "\073\uffbb\001\002\000\004\002\000\001\002\000\022\014" +
    "\035\015\022\020\040\022\042\023\045\024\026\050\025" +
    "\100\033\001\002\000\024\014\035\015\022\020\040\022" +
    "\042\023\045\024\026\050\025\070\114\100\033\001\002" +
    "\000\004\023\115\001\002\000\004\065\116\001\002\000" +
    "\014\064\052\100\053\101\047\102\050\103\054\001\002" +
    "\000\004\066\120\001\002\000\004\073\121\001\002\000" +
    "\026\010\uffb6\014\uffb6\015\uffb6\020\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\050\uffb6\070\uffb6\100\uffb6\001\002\000\014\064" +
    "\052\100\053\101\047\102\050\103\054\001\002\000\004" +
    "\066\124\001\002\000\004\067\125\001\002\000\022\014" +
    "\035\015\022\020\040\022\042\023\045\024\026\050\025" +
    "\100\033\001\002\000\024\014\035\015\022\020\040\022" +
    "\042\023\045\024\026\050\025\070\127\100\033\001\002" +
    "\000\030\010\uffc6\014\uffc6\015\uffc6\020\uffc6\021\130\022" +
    "\uffc6\023\uffc6\024\uffc6\050\uffc6\070\uffc6\100\uffc6\001\002" +
    "\000\004\067\131\001\002\000\022\014\035\015\022\020" +
    "\040\022\042\023\045\024\026\050\025\100\033\001\002" +
    "\000\024\014\035\015\022\020\040\022\042\023\045\024" +
    "\026\050\025\070\133\100\033\001\002\000\026\010\uffb8" +
    "\014\uffb8\015\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\050" +
    "\uffb8\070\uffb8\100\uffb8\001\002\000\024\014\035\015\022" +
    "\020\040\022\042\023\045\024\026\050\025\070\ufffd\100" +
    "\033\001\002\000\006\053\137\073\136\001\002\000\026" +
    "\010\uffde\014\uffde\015\uffde\020\uffde\022\uffde\023\uffde\024" +
    "\uffde\050\uffde\070\uffde\100\uffde\001\002\000\014\076\141" +
    "\077\143\101\140\102\142\103\144\001\002\000\004\073" +
    "\151\001\002\000\004\073\150\001\002\000\004\073\147" +
    "\001\002\000\004\073\146\001\002\000\004\073\145\001" +
    "\002\000\026\010\uffdb\014\uffdb\015\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\050\uffdb\070\uffdb\100\uffdb\001\002\000" +
    "\026\010\uffd9\014\uffd9\015\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\050\uffd9\070\uffd9\100\uffd9\001\002\000\026\010" +
    "\uffdc\014\uffdc\015\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\050\uffdc\070\uffdc\100\uffdc\001\002\000\026\010\uffda\014" +
    "\uffda\015\uffda\020\uffda\022\uffda\023\uffda\024\uffda\050\uffda" +
    "\070\uffda\100\uffda\001\002\000\026\010\uffdd\014\uffdd\015" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\050\uffdd\070\uffdd" +
    "\100\uffdd\001\002\000\004\017\153\001\002\000\004\045" +
    "\154\001\002\000\004\065\155\001\002\000\004\046\156" +
    "\001\002\000\004\047\157\001\002\000\004\071\160\001" +
    "\002\000\004\072\161\001\002\000\004\066\162\001\002" +
    "\000\004\067\163\001\002\000\022\014\035\015\022\020" +
    "\040\022\042\023\045\024\026\050\025\100\033\001\002" +
    "\000\024\014\035\015\022\020\040\022\042\023\045\024" +
    "\026\050\025\070\165\100\033\001\002\000\024\014\uffe9" +
    "\015\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\050\uffe9\070" +
    "\uffe9\100\uffe9\001\002\000\006\101\216\102\217\001\002" +
    "\000\022\055\200\065\173\076\174\077\170\100\175\101" +
    "\177\102\176\103\171\001\002\000\004\073\215\001\002" +
    "\000\004\073\214\001\002\000\014\054\205\055\204\056" +
    "\206\057\202\073\213\001\002\000\014\055\200\065\173" +
    "\100\175\101\177\102\176\001\002\000\004\073\210\001" +
    "\002\000\016\054\uffcd\055\uffcd\056\uffcd\057\uffcd\066\uffcd" +
    "\073\uffcd\001\002\000\016\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\066\uffcb\073\uffcb\001\002\000\016\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\066\uffcc\073\uffcc\001\002\000\014\055" +
    "\200\065\173\100\175\101\177\102\176\001\002\000\016" +
    "\054\uffce\055\uffce\056\206\057\202\066\uffce\073\uffce\001" +
    "\002\000\014\055\uffc7\065\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\001\002\000\014\055\200\065\173\100\175\101\177\102" +
    "\176\001\002\000\014\055\uffc9\065\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\001\002\000\014\055\uffca\065\uffca\100\uffca\101" +
    "\uffca\102\uffca\001\002\000\014\055\uffc8\065\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\001\002\000\016\054\205\055\204\056" +
    "\206\057\202\066\uffd0\073\uffd0\001\002\000\026\010\uffd4" +
    "\014\uffd4\015\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\050" +
    "\uffd4\070\uffd4\100\uffd4\001\002\000\014\054\205\055\204" +
    "\056\206\057\202\066\212\001\002\000\016\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\066\uffcf\073\uffcf\001\002\000\026" +
    "\010\uffd1\014\uffd1\015\uffd1\020\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\050\uffd1\070\uffd1\100\uffd1\001\002\000\026\010\uffd2" +
    "\014\uffd2\015\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\050" +
    "\uffd2\070\uffd2\100\uffd2\001\002\000\026\010\uffd3\014\uffd3" +
    "\015\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\050\uffd3\070" +
    "\uffd3\100\uffd3\001\002\000\004\073\221\001\002\000\004" +
    "\073\220\001\002\000\026\010\uffd5\014\uffd5\015\uffd5\020" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\050\uffd5\070\uffd5\100\uffd5" +
    "\001\002\000\026\010\uffd6\014\uffd6\015\uffd6\020\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\050\uffd6\070\uffd6\100\uffd6\001\002" +
    "\000\024\014\035\015\022\020\040\022\042\023\045\024" +
    "\026\050\025\070\ufffe\100\033\001\002\000\024\014\035" +
    "\015\022\020\040\022\042\023\045\024\026\050\025\070" +
    "\ufffc\100\033\001\002\000\006\014\226\100\227\001\002" +
    "\000\004\066\266\001\002\000\004\100\252\001\002\000" +
    "\004\053\230\001\002\000\006\101\231\102\232\001\002" +
    "\000\004\073\246\001\002\000\004\073\233\001\002\000" +
    "\014\064\052\100\053\101\047\102\050\103\054\001\002" +
    "\000\004\073\235\001\002\000\006\063\236\100\240\001" +
    "\002\000\004\100\245\001\002\000\004\066\uffb1\001\002" +
    "\000\006\062\241\063\242\001\002\000\006\101\243\102" +
    "\244\001\002\000\004\066\uffae\001\002\000\004\066\uffb0" +
    "\001\002\000\004\066\uffaf\001\002\000\004\066\uffad\001" +
    "\002\000\014\064\052\100\053\101\047\102\050\103\054" +
    "\001\002\000\004\073\250\001\002\000\006\063\236\100" +
    "\240\001\002\000\004\066\uffb2\001\002\000\004\053\253" +
    "\001\002\000\006\101\254\102\255\001\002\000\004\073" +
    "\262\001\002\000\004\073\256\001\002\000\014\064\052" +
    "\100\053\101\047\102\050\103\054\001\002\000\004\073" +
    "\260\001\002\000\006\063\236\100\240\001\002\000\004" +
    "\066\uffb3\001\002\000\014\064\052\100\053\101\047\102" +
    "\050\103\054\001\002\000\004\073\264\001\002\000\006" +
    "\063\236\100\240\001\002\000\004\066\uffb4\001\002\000" +
    "\004\067\267\001\002\000\022\014\035\015\022\020\040" +
    "\022\042\023\045\024\026\050\025\100\033\001\002\000" +
    "\024\014\035\015\022\020\040\022\042\023\045\024\026" +
    "\050\025\070\271\100\033\001\002\000\026\010\uffb5\014" +
    "\uffb5\015\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\050\uffb5" +
    "\070\uffb5\100\uffb5\001\002\000\004\051\273\001\002\000" +
    "\004\075\274\001\002\000\004\052\275\001\002\000\004" +
    "\065\276\001\002\000\012\100\301\101\277\102\300\103" +
    "\303\001\002\000\006\054\uffe5\066\uffe5\001\002\000\006" +
    "\054\uffe4\066\uffe4\001\002\000\006\054\uffe6\066\uffe6\001" +
    "\002\000\006\054\305\066\uffdf\001\002\000\006\054\uffe7" +
    "\066\uffe7\001\002\000\004\066\316\001\002\000\012\100" +
    "\310\101\306\102\307\103\311\001\002\000\006\054\305" +
    "\066\uffdf\001\002\000\006\054\305\066\uffdf\001\002\000" +
    "\006\054\305\066\uffdf\001\002\000\006\054\305\066\uffdf" +
    "\001\002\000\004\066\uffe3\001\002\000\004\066\uffe2\001" +
    "\002\000\004\066\uffe0\001\002\000\004\066\uffe1\001\002" +
    "\000\004\073\317\001\002\000\026\010\uffe8\014\uffe8\015" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\050\uffe8\070\uffe8" +
    "\100\uffe8\001\002\000\006\053\322\073\321\001\002\000" +
    "\026\010\uffd8\014\uffd8\015\uffd8\020\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\050\uffd8\070\uffd8\100\uffd8\001\002\000\004\103" +
    "\323\001\002\000\004\073\324\001\002\000\026\010\uffd7" +
    "\014\uffd7\015\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\050" +
    "\uffd7\070\uffd7\100\uffd7\001\002\000\004\104\326\001\002" +
    "\000\004\067\327\001\002\000\024\010\034\014\035\015" +
    "\022\020\040\022\042\023\045\024\026\050\025\100\033" +
    "\001\002\000\004\070\331\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\042\004" +
    "\026\005\043\010\036\011\027\012\035\016\040\017\030" +
    "\020\022\021\023\022\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\075\010\221\011\071\012\074\016" +
    "\072\017\076\020\077\021\067\022\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\133\005\043\011\027\012\035\016\040\017" +
    "\030\020\022\021\023\022\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\066\005" +
    "\043\011\027\012\035\016\040\017\030\020\022\021\023" +
    "\022\031\001\001\000\022\005\075\011\071\012\074\016" +
    "\072\017\076\020\077\021\067\022\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\112\005\043\011\027" +
    "\012\035\016\040\017\030\020\022\021\023\022\031\001" +
    "\001\000\022\005\075\011\071\012\074\016\072\017\076" +
    "\020\077\021\067\022\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\125" +
    "\005\043\011\027\012\035\016\040\017\030\020\022\021" +
    "\023\022\031\001\001\000\022\005\075\011\071\012\074" +
    "\016\072\017\076\020\077\021\067\022\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\131\005\043" +
    "\011\027\012\035\016\040\017\030\020\022\021\023\022" +
    "\031\001\001\000\022\005\075\011\071\012\074\016\072" +
    "\017\076\020\077\021\067\022\070\001\001\000\002\001" +
    "\001\000\022\005\075\011\071\012\074\016\072\017\076" +
    "\020\077\021\067\022\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\163\005\043\011\027" +
    "\012\035\016\040\017\030\020\022\021\023\022\031\001" +
    "\001\000\022\005\075\011\071\012\074\016\072\017\076" +
    "\020\077\021\067\022\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\202\001\001\000\004\013" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\200\001\001\000" +
    "\004\014\202\001\001\000\002\001\001\000\004\013\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\202\001\001\000\002\001\001\000\004" +
    "\014\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\222\005\043\011\027\012\035\016\040\017\030\020\022" +
    "\021\023\022\031\001\001\000\022\005\075\011\071\012" +
    "\074\016\072\017\076\020\077\021\067\022\070\001\001" +
    "\000\004\024\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\233\001\001\000\002\001" +
    "\001\000\004\015\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\246\001\001\000\002\001\001\000\004\015" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\256\001\001\000\002\001\001\000\004\015\260\001\001" +
    "\000\002\001\001\000\004\023\262\001\001\000\002\001" +
    "\001\000\004\015\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\267\005\043\011\027\012\035\016" +
    "\040\017\030\020\022\021\023\022\031\001\001\000\022" +
    "\005\075\011\071\012\074\016\072\017\076\020\077\021" +
    "\067\022\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\314" +
    "\001\001\000\004\007\313\001\001\000\004\007\312\001" +
    "\001\000\004\007\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\327\004\026" +
    "\005\043\010\036\011\027\012\035\016\040\017\030\020" +
    "\022\021\023\022\031\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_RPTR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_RPTR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_RPTR ::= Identificador Op_atribucion Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_RPTR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_RPTR ::= Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_RPTR ::= Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_negativo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_RPTR ::= T_dato Identificador Igual Numero_positivo P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RPTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RPTR ::= Rptr Parentesis_a SENTENCIA_RPTR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RPTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EJT_MTRT ::= Ejt Llave_a SENTENCIA Llave_c Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EJT_MTRT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MTRT ::= Mtrt Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MTRT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND_CONDCC ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Condcc Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_CONDCC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Cadena Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Numero_negativo Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Numero_positivo Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND ::= Cond Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACIONES ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACIONES ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACIONES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACIONES ::= Resta OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACIONES ::= Parentesis_a OPERACIONES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACIONES ::= OPERACIONES OP OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= Identificador Igual OPERACIONES P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= Identificador Op_atribucion Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Identificador Op_atribucion Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Tx Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Tx Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Igual Falso P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador Igual Verdadero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_dato Identificador Igual Numero_negativo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_dato Identificador Igual Numero_positivo P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTECIA_IMPRESION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTECIA_IMPRESION ::= Suma Numero_negativo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTECIA_IMPRESION ::= Suma Numero_positivo SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTECIA_IMPRESION ::= Suma Identificador SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTECIA_IMPRESION ::= Suma Cadena SENTECIA_IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTECIA_IMPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INICIO_SENTECIA_IMPRESION ::= Numero_negativo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INICIO_SENTECIA_IMPRESION ::= Numero_positivo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INICIO_SENTECIA_IMPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO_SENTECIA_IMPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_SENTECIA_IMPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRESION ::= Sysm Punto Ot Punto Impr Parentesis_a INICIO_SENTECIA_IMPRESION SENTECIA_IMPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO_MAIN ::= Plub Stc Vid Min Parentesis_a Strg Ars Corchete_a Corchete_c Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_MAIN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA RPTR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= EJT_MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA EJT_MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA MTRT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= COND_CONDCC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA COND_CONDCC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA_CLASE ::= METODO_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_CLASE ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_CLASE ::= METODO_MAIN SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA_CLASE ::= SENTENCIA METODO_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pckg IdentClasePaquete P_coma Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pckg IdentClasePaquete P_coma Imprt Stc Jtcs P_coma Plub Ctg IdentClasePaquete Llave_a SENTENCIA_CLASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

